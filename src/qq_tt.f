function sqq_tt(iq, p1, p2, p3, p4, lam3, lam4)

  ! function generated by madgraph
  ! returns amplitude squared summed/avg over colors and helicities
  ! for the point in phase space p1, p2, p3, p4, lam3, lam4
  ! for process: q q~ -> t t~

  use kinds

  implicit none

  ! functions
  real*8 :: sqq_tt
  real*8 :: qq_tt

  ! constants
  integer, parameter :: nexternal = 4, ncomb = 16

  ! arguments
  integer :: iq
  real*8 :: p1(0:3), p2(0:3), p3(0:3), p4(0:3)
  integer :: lam3, lam4

  ! variables
  integer :: nhel(nexternal, ncomb), ntry
  real*8 :: t
  integer :: ihel
  logical :: goodhel(ncomb)
  data goodhel /ncomb*.false./
  data ntry /0/

  ! store possible helicity combinations
  data (nhel(ihel,  1), ihel = 1, 4) /-1, -1, -1, -1/
  data (nhel(ihel,  2), ihel = 1, 4) /-1, -1, -1,  1/
  data (nhel(ihel,  3), ihel = 1, 4) /-1, -1,  1, -1/
  data (nhel(ihel,  4), ihel = 1, 4) /-1, -1,  1,  1/
  data (nhel(ihel,  5), ihel = 1, 4) /-1,  1, -1, -1/
  data (nhel(ihel,  6), ihel = 1, 4) /-1,  1, -1,  1/
  data (nhel(ihel,  7), ihel = 1, 4) /-1,  1,  1, -1/
  data (nhel(ihel,  8), ihel = 1, 4) /-1,  1,  1,  1/
  data (nhel(ihel,  9), ihel = 1, 4) / 1, -1, -1, -1/
  data (nhel(ihel, 10), ihel = 1, 4) / 1, -1, -1,  1/
  data (nhel(ihel, 11), ihel = 1, 4) / 1, -1,  1, -1/
  data (nhel(ihel, 12), ihel = 1, 4) / 1, -1,  1,  1/
  data (nhel(ihel, 13), ihel = 1, 4) / 1,  1, -1, -1/
  data (nhel(ihel, 14), ihel = 1, 4) / 1,  1, -1,  1/
  data (nhel(ihel, 15), ihel = 1, 4) / 1,  1,  1, -1/
  data (nhel(ihel, 16), ihel = 1, 4) / 1,  1,  1,  1/

  sqq_tt = 0.d0
  ntry = ntry + 1
  do ihel = 1, ncomb
    ! if (goodhel(ihel) .or. ntry < 10) then
      t = qq_tt(iq, p1, p2, p3, p4, lam3, lam4, nhel(1, ihel))
      sqq_tt = sqq_tt + t
    ! if (t > 0d0 .and. .not. goodhel(ihel)) then
        ! goodhel(ihel)= .true.
    !   endif
    ! end if
  enddo
  sqq_tt = sqq_tt/4d0
end function sqq_tt


function qq_tt(iq, p1, p2, p3, p4, lam3, lam4, nhel)

  ! function generated by madgraph
  ! returns amplitude squared summed/avg over colors
  ! for the point in phase space p1, p2, p3, p4
  ! and helicity nhel(1), nhel(2)
  ! for process: q q~ -> t t~

  use kinds
  use modelling, only: g, gg, fmass, fwidth

  implicit none

  ! functions
  real*8 :: qq_tt

  ! constants
  integer, parameter :: ngraphs = 1, neigen = 1, nexternal = 4
  real, parameter :: zero = 0.d0

  ! arguments
  integer :: iq
  real*8 :: p1(0:3), p2(0:3), p3(0:3), p4(0:3)
  integer :: lam3, lam4
  integer :: nhel(nexternal)

  ! local variables
  integer :: i, j
  real*8 :: eigen_val(neigen), eigen_vec(ngraphs,neigen)
  complex*16 ztemp
  complex*16 amp(ngraphs)
  complex*16 w1(6), w2(6), w3(6), w4(6), w5(6)

  ! color data
  data eigen_val(1) /2.2222222222222221e-01/
  data eigen_vec(1, 1) /-1.0000000000000000e+00/

  ! select only specified helicities
  if((nhel(3) == lam3) .and. (nhel(4) == lam4))then
    continue
  else
    qq_tt = 0.d0
    return
  end if

  ! wavefunctions
  call ixxxxx(p1, fmass(iq), nhel(1),  1, w1)
  call oxxxxx(p2, fmass(iq), nhel(2), -1, w2)
  call oxxxxx(p3, fmass(11), nhel(3),  1, w3)
  call ixxxxx(p4, fmass(11), nhel(4), -1, w4)

  ! currents
  call jioxxx(w1, w2, gg, zero, zero, w5)

  ! amplitudes
  call iovxxx(w4, w3, w5, gg, amp(1))

  ! sum amplitudes
  qq_tt = 0.d0
  do i = 1, neigen
    ztemp = (0.d0, 0.d0)
    do j = 1, ngraphs
      ztemp = ztemp + eigen_vec(j, i)*amp(j)
    enddo
    qq_tt = qq_tt + ztemp*eigen_val(i)*conjg(ztemp)
  enddo
  ! call gaugecheck(amp, ztemp, eigen_vec, eigen_val, ngraphs, neigen)
end function qq_tt
